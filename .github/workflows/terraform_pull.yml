name: Pull Request Terraform Checks

on:
 # workflow_dispatch:
  pull_request:
    branches: 
      - develop
      - main
    paths:
      - '.github/workflows/terraform_pull.yml'
      - 'terraform/**'

permissions:
  id-token: write
  pull-requests: write
  contents: read

jobs:
  iac-audit:
    name: IaC Audit 
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Checkov GitHub Action
        id: audit
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: sarif,junitxml
          output_file_path: checkov-results.sarif,checkov-results.xml
        continue-on-error: true

      - name: Upload checkov results
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: |
            checkov-results.xml
            checkov-results.sarif

      #- name: Report Audit Failure
       # if: steps.audit.outcome != 'success'
        #uses: actions/github-script@v4
        #with:
         # script: |
          #    core.setFailed('checkov audit failed')
  
  iac-lint-and-validate:
    name: IaC Lint & Validate
    runs-on: ubuntu-24.04
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13

      - name: Check formatting
        id: format
        run: terraform fmt -check -recursive
        working-directory: "./terraform"
  
      - name: Initialise Terraform
        run: terraform init -backend=false -input=false
        working-directory: "./terraform"
  
      - name: Validate configuration
        run: terraform validate -no-color
        working-directory: "./terraform"

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: 
      - iac-lint-and-validate
      - iac-audit
    concurrency:
      group: "${{ github.repository }}-${{ github.base_ref }}"
    environment: ${{ (github.base_ref == 'main' && 'PRD') || (github.base_ref == 'develop' && 'DEV') }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: eu-west-1
      
      - name: Prepare Terraform Environment Config Files
        run: ./scripts/tf-prepare-environment.sh ${{ (github.base_ref == 'main' && 'PRD') || (github.base_ref == 'develop' && 'DEV') }} 
      - name: Initialise Terraform
        id: init
        run: terraform init -backend-config=backend.conf -input=false
        working-directory: "./terraform"
        continue-on-error: true
  
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="config.tfvars" -no-color
        working-directory: "./terraform"
        continue-on-error: true

      - name: Post Terraform Plan Output
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
            <details><summary>Show Plan for ${{ (github.base_ref == 'main' && 'Prod') || (github.base_ref == 'develop' && 'DEV Non-Live') }} Deployment</summary>
  
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
  
            </details>
  
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
            github.rest.issues.createComment({
              issue_number: ${{ github.event.number || inputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

            github.rest.issues.addLabels({
              issue_number: ${{ github.event.number || inputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['${{ (github.base_ref  == 'main' && 'PRODUCTION') || (github.base_ref == 'develop' && 'DEV') }}']
            })

      - name: Report Terraform Failure
        if: steps.init.outcome != 'success' || steps.plan.outcome != 'success'
        uses: actions/github-script@v4
        with:
          script: |
              core.setFailed('Terraform Init or Plan Failed')
